# SPDX-FileCopyrightText: 2020-2021 Memories Project
#
# SPDX-License-Identifier: Apache-2.0

name: Development

on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ 'macos-10.15', 'ubuntu-20.04', 'windows-2016' ]
    runs-on: ${{ matrix.os }}
    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
        if: matrix.os == 'ubuntu-20.04'

      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - uses: docker://multiarch/alpine:x86-edge
        with:
          args: 'sh -c "uname -m && apk update && apk add build-base && cd jdk2/src/main/c && make"'
        if: matrix.os == 'ubuntu-20.04'

      - uses: docker://multiarch/alpine:i386-edge
        with:
          args: 'sh -c "uname -m && apk update && apk add build-base && cd jdk2/src/main/c && make"'
        if: matrix.os == 'ubuntu-20.04'

      - uses: docker://multiarch/alpine:amd64-edge
        with:
          args: 'sh -c "uname -m && apk update && apk add build-base && cd jdk2/src/main/c && make"'
        if: matrix.os == 'ubuntu-20.04'

      - uses: docker://multiarch/alpine:x86_64-edge
        with:
          args: 'sh -c "uname -m && apk update && apk add build-base && cd jdk2/src/main/c && make"'
        if: matrix.os == 'ubuntu-20.04'

      - uses: docker://multiarch/alpine:armv7-edge
        with:
          args: 'sh -c "uname -m && apk update && apk add build-base && cd jdk2/src/main/c && make"'
        if: matrix.os == 'ubuntu-20.04'

      - uses: docker://multiarch/alpine:armhf-edge
        with:
          args: 'sh -c "uname -m && apk update && apk add build-base && cd jdk2/src/main/c && make"'
        if: matrix.os == 'ubuntu-20.04'

      - uses: docker://multiarch/alpine:arm64-edge
        with:
          args: 'sh -c "uname -m && apk update && apk add build-base && cd jdk2/src/main/c && make"'
        if: matrix.os == 'ubuntu-20.04'

      - uses: docker://multiarch/alpine:aarch64-edge
        with:
          args: 'sh -c "uname -m && apk update && apk add build-base && cd jdk2/src/main/c && make"'
        if: matrix.os == 'ubuntu-20.04'

      - uses: docker://multiarch/alpine:ppc64le-edge
        with:
          args: 'sh -c "uname -m && apk update && apk add build-base && cd jdk2/src/main/c && make"'
        if: matrix.os == 'ubuntu-20.04'

      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: make mingw-w64-i686-clang mingw-w64-x86_64-clang
        if: matrix.os == 'windows-2016' || matrix.os == 'windows-2019'

      - name: msys2/build
        shell: msys2 {0}
        run: |
          cd jdk2/src/main/c
          make win32 CC=/mingw32/bin/clang
          make win64 CC=/mingw64/bin/clang
        if: matrix.os == 'windows-2016' || matrix.os == 'windows-2019'

      - name: actions/build
        run: |
          cd jdk2/src/main/c && make
        if: matrix.os == 'macos-10.15'

      - uses: actions/upload-artifact@v2
        with:
          name: memories.jnilib
          path: jdk2/src/main/resources
